https://inpa.tistory.com/entry/WEB-%F0%9F%8C%90-HTTP-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A2%85%EB%A5%98-%ED%86%B5%EC%8B%A0-%EA%B3%BC%EC%A0%95-%F0%9F%92%AF-%EC%B4%9D%EC%A0%95%EB%A6%AC

주요 메소드
        GET                                                 // 리소스 조회
        POST                                                // 요청 데이터 처리.(생성)
        PUT                                                 // 리소스를 전부 덮어쓰기
        PATCH                                               // 리소스를 일부 변경
        DELETE                                              // 리소스 삭제


기타 메소드
        HEAD                                                // GET과 동일하지만 메세지 부분을 제외하고 상태줄,헤더만 반환
        OPTION                                              // 대상 리소스에 대한 통신 가능 옵션(메서드)를 설명
        CONNECT                                             // 대상 자원으로 식벽되는서버에 대한 터널을 설정
        TRACE                                               // 대상 리소스에 대한 경로를 따라 메시지 루프 백


        
XMLHttpRequest
        XMLHttpRequest변수명.open(메소드, url, async, user, password)
         - XMLHttpRequest 객체 초기화
           * 메소드     - GET, POST, PUT, PATCH, DELETE 등
           * url        - 요청할 처리할 주소
         - 이후 매개변수는 생략가능.
           * async      - 비동기 여부 (default는 true)
           * user       - username이며 기본값은 null로 설정
           * password   - password이며 기본값은 null로 설정

        XMLHttpRequest변수명.onreadystatechange = 이벤트콜백함수
         - XMLHttpRequest의 readyState 값이 변경되면 호출되는 이벤트
         - readyState 값의 변경에 따라, 요청의 처리 결과 확인 가능
           * UNSET              - 요청이 생성된 상태로 아직 서버에 요청을 보내지 않았습니다.
           * OPENED             - open() 함수가 호출된 상태로, 요청이 초기화되었습니다.
           * HEADERS_RECEIVED   - send() 함수 호출 후, 서버에 요청한 결과의 Header를 수신한 상태입니다.
           * LOADING            - send() 함수 호출 후, 서버에 요청한 결과를 받아오는 중입니다.
           * DONE               - 서버에 요청한 결과를 받은 상태이며, 결과는 성공이거나 실패했음을 알 수 있습니다.
             ex) const xhr = new XMLHttpRequest();       
                 let url = 'https://reactnative.dev/movies.json'              
                 const method = "GET";
                 xhr.open(method, url);
                 xhr.onreadystatechange = function () {               // 통신 연결시 할 행동 ?
                   if (this.status == 200 && this.readyState === XMLHttpRequest.DONE) {
                     console.log('성공')
                     console.log(xhr.response)                        // 받은 값(response)
                   }
                 }
                 xhr.send();                                          // 요청 보냄
                      

        XMLHttpRequest변수명.addEventListener(타입, 이벤트 콜백함수)
         - onreadystatechange와 같이 이벤트 처리 가능.
           ex) xhr.addEventListener('readystatechange', event => {         // 타입이 뭐지 ?
                    // 처리 내용 정의
               });


        XMLHttpRequest변수명.send(body)
         - 서버에 요청을 보냄. 비동기인경우 요청을 보내고 바로 반환되지만, 동기인 경우 서버에서 응답이 반환될떄까지
           대기함.
         - body는 POST", "PUT"과 같이 body가 필요한 경우 선택적으로 사용하는 값 
           ex) xhr.send(JSON.stringify(data));                  // POST 일시

        XMLHttpRequest변수명.setRequestHeader(컨텐츠 타입, 데이터 타입)
         - xmr 변수의 본문을 특정 타입이라고 지정
         - 컨텐츠 타입
           * Content-Type               - 미디어 타입
           * Content-Language           - 해당 개체와 가장 잘 어울리는 자연언어
           * Content-Encoding           - 해당 개체 데이터의 압축 방식
           * Content-Length             - 전달되는 해당 개체의 바이트 수
           * Content-Location           - 해당 개체가 실제 어디에 위치하는가를 알려줌
           * Content-Disposition        - 웹브라우저는, 파일 다운로드 대화상자를 표시 후 파일 저장 도모
         - 데이터 타입 (Content-Type 꺼만설명)
           * multipart/form-data        - 한번에 여러개의 파일 전송
           * application/xml            - html
           * image/gif
           * video/mp4                  .... 등등이 존재함
          ex) xhr.setRequestHeader('Content-Type', 'multipart/form-data');
              * 보내는 본문의 Content-Type을 multipart/form-data로 설정합니다.
              * FormData를 사용하는 경우 Content-Type은 multipart/form-data로 자동 설정됩니다.




fetch           fetch(url, [option])
         - API를 사용하여 백엔드 서버와 비동기 요청을 하는 방식으로 서버와 통신
         - fetch API는 3개의 interfeace를 도입하고 있는데 Headers, Request, Response
           * Header     - HTTP header와 대응되는 객체
           * Request    - HTTP요청을 통해 자원을 가져오는 인터페이스
                          첫번째 인자는 호출한 Path가 들어가고, 두번째 인자에는 Request에 대한 정보가 들어감
                          * method, head, body 등
           * Response   - fetch를 호출하면 가져올 수 있는 객체
        - fetch() : 요청지 주소, method headers 등 요청정보, 데이터 정보(body)
          then()  : 첫번째 then. 받을 데이터 형태의 빈깡통으로 세팅.  ---> 나머지 랜더링을 계속 진행
          then()  : 두번째 then. 실제 데이터가 담기는 곳. ---> 랜더링 완료 후 두번째 then에 데이터가 있으면 다시 랜더링이 일어남.


          ex) let url = 'https://reactnative.dev/movies.json';
              const [movie, SetMovie] = useState([])
              fetch(url)
                .then(res => res.json())              // json으로 받을 것을 명시
                .then(res => {SetMovie(res)});        // 실제 데이터를 상태변수에 업데이트
              
              return (
                <>
                  <SafeAreaView>
                    <Text>{JSON.stringify(movie)}</Text>                // res는 오브젝트로 받아서 제이슨으로 변환
                  </SafeAreaView>
                </>
              )